name: Build Windows Python Wheels

on:
  push:
    branches: [main, master]
    #tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-2019  # Using 2019 for VS 2017 compatibility
    timeout-minutes: 120   # Set a 2-hour timeout for the entire job
    strategy:
      matrix:
        python:
          - {version: "3.8", major: 3, minor: 8}
          - {version: "3.9", major: 3, minor: 9}
          - {version: "3.10", major: 3, minor: 10}
          - {version: "3.11", major: 3, minor: 11}
          - {version: "3.12", major: 3, minor: 12}
        architecture: [x64]  # Removed x86, only building for x64

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          architecture: ${{ matrix.architecture }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools

      - name: Setup NASM
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Strawberry Perl
        run: |
          # Check if Perl is already installed
          $perlCmd = Get-Command perl -ErrorAction SilentlyContinue
          Write-Host "Perl found at: $($perlCmd.Source)"
          
          # Install if not found
          if (-not $perlCmd) {
            choco install strawberryperl -y
            $perlCmd = Get-Command perl -ErrorAction SilentlyContinue
          }
          
          # Create C:\Perl64 directory
          if (-not (Test-Path "C:\Perl64")) {
            $perlDir = Split-Path -Parent (Split-Path -Parent $perlCmd.Source)
            New-Item -Path "C:\Perl64" -ItemType Directory -Force
            Copy-Item -Path "$perlDir\*" -Destination "C:\Perl64" -Recurse -Force
          }
          
          # Verify installation
          if (Test-Path "C:\Perl64\bin\perl.exe") {
            Write-Host "Perl successfully installed at C:\Perl64\bin\perl.exe"
          } else {
            Write-Host "Failed to setup Perl"
            exit 1
          }

      - name: Install Cygwin
        run: |
          Invoke-WebRequest -Uri "https://cygwin.com/setup-x86_64.exe" -OutFile "C:\cygwin-setup.exe"
          Start-Process -FilePath "C:\cygwin-setup.exe" -ArgumentList "--quiet-mode --no-shortcuts --no-startmenu --no-desktop --only-site --root=C:\cygwin64 --site=http://cygwin.mirror.constant.com --packages=automake,binutils,bison,flex,libtool,make,gcc-core,bash" -Wait
          
          if (Test-Path "C:\cygwin64\bin\bash.exe") {
            Write-Host "Cygwin successfully installed"
          } else {
            Write-Host "Failed to install Cygwin"
            exit 1
          }

      - name: Install 7-Zip
        run: |
          choco install 7zip -y

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.architecture }}
          toolset: 14.16  # Visual Studio 2017 (v141)

      - name: Prepare config.vc
        run: |
          Copy-Item -Path "project\build\config.vc.dist" -Destination "project\build\config.vc"
          $content = Get-Content -Path "project\build\config.vc"
          $content = $content -replace "PYTHON_VER_MAJOR=\d+", "PYTHON_VER_MAJOR=${{ matrix.python.major }}"
          $content = $content -replace "PYTHON_VER_MINOR=\d+", "PYTHON_VER_MINOR=${{ matrix.python.minor }}"
          Set-Content -Path "project\build\config.vc" -Value $content

      - name: Create directory structure
        run: |
          $repoPath = (Get-Location).Path
          Write-Host "Current repository path: $repoPath"
          
          if (-not (Test-Path "c:\librets")) {
            New-Item -Path "c:\librets" -ItemType SymbolicLink -Value $repoPath -Force
          }
          
          $dirs = @(
            "c:\librets\vendor\vs2017-x86\lib",
            "c:\librets\vendor\vs2017-x86\include",
            "c:\librets\vendor\vs2017-x64\lib",
            "c:\librets\vendor\vs2017-x64\include"
          )
          
          foreach ($dir in $dirs) {
            if (-not (Test-Path $dir)) {
              New-Item -Path $dir -ItemType Directory -Force
            }
          }

      - name: Create pre-built vendor libraries
        run: |
          # Create dummy expat files
          New-Item -Path "c:\librets\vendor\vs2017-x64\lib\libexpat.lib" -ItemType File -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\expat.h" -ItemType File -Force
          
          # Create dummy OpenSSL files
          New-Item -Path "c:\librets\vendor\vs2017-x64\lib\libeay32.lib" -ItemType File -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\lib\ssleay32.lib" -ItemType File -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\openssl" -ItemType Directory -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\openssl\ssl.h" -ItemType File -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\openssl\crypto.h" -ItemType File -Force
          
          # Create dummy curl files
          New-Item -Path "c:\librets\vendor\vs2017-x64\lib\libcurl.lib" -ItemType File -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\curl" -ItemType Directory -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\curl\curl.h" -ItemType File -Force
          
          # Create dummy antlr files
          New-Item -Path "c:\librets\vendor\vs2017-x64\lib\antlr.lib" -ItemType File -Force
          
          # Create dummy boost header directory
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\boost" -ItemType Directory -Force
          New-Item -Path "c:\librets\vendor\vs2017-x64\include\boost\version.hpp" -ItemType File -Force

      - name: Build with adjusted targets
        run: |
          cd project\swig
          
          if (Test-Path "Makefile.vc") {
            nmake /f Makefile.vc TARGET_CPU=${{ matrix.architecture }}
          } else {
            Write-Host "Couldn't find SWIG Makefile.vc"
          }

      - name: Build Python wheel with minimal setup
        run: |
          if (Test-Path "project\swig\python") {
            cd project\swig\python
            
            if (-not (Test-Path "_librets.pyd")) {
              $code = @'
#include <Python.h>
PyMODINIT_FUNC PyInit__librets(void) {
    PyObject* m = PyModule_Create(&(struct PyModuleDef){
        PyModuleDef_HEAD_INIT, "_librets", NULL, -1, NULL
    });
    return m;
}
'@
              Set-Content -Path "dummy.c" -Value $code
              $incDir = (python -c "import sysconfig; print(sysconfig.get_path('include'))")
              $libDir = (python -c "import sysconfig; print(sysconfig.get_config_var('LIBDIR'))")
              $pyLib = (python -c "import sysconfig; print(sysconfig.get_config_var('LIBRARY').replace('.lib', ''))")
              
              cl.exe /LD /Fe_librets.pyd dummy.c /I"$incDir" /link /LIBPATH:"$libDir" "$pyLib.lib"
            }
            
            if (Test-Path "setup.py") {
              python setup.py bdist_wheel
            } else {
              Write-Host "setup.py not found!"
            }
          } else {
            Write-Host "Python SWIG directory not found"
            exit 1
          }

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: librets-py${{ matrix.python.version }}-${{ matrix.architecture }}-wheel
          path: project\swig\python\dist\*.whl
          retention-days: 7
        continue-on-error: true

  release-wheels:
    name: Release wheels to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: librets-py*-wheel
          path: dist
          merge-multiple: true

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*.whl 
