name: Build Windows Python Wheels

on:
  push:
    branches: [main, master]
    #tags: ["v*"]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on Windows
    runs-on: windows-2019  # Using 2019 for VS 2017 compatibility
    strategy:
      matrix:
        python:
          - {version: "3.8", major: 3, minor: 8}
          - {version: "3.9", major: 3, minor: 9}
          - {version: "3.10", major: 3, minor: 10}
          - {version: "3.11", major: 3, minor: 11}
          - {version: "3.12", major: 3, minor: 12}
        architecture: [x64]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python.version }}
          architecture: ${{ matrix.architecture }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools

      - name: Setup NASM
        run: |
          choco install nasm -y
          echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Strawberry Perl
        run: |
          choco install strawberryperl -y
          if ('${{ matrix.architecture }}' -eq 'x64') {
            Copy-Item -Path "C:\Strawberry" -Destination "C:\Perl64" -Recurse -Force
          } else {
            Copy-Item -Path "C:\Strawberry" -Destination "C:\Perl" -Recurse -Force
          }
          echo "C:\Strawberry\perl\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\Strawberry\c\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install 7-Zip
        run: |
          choco install 7zip -y

      - name: Setup Visual Studio Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.architecture }}
          toolset: 14.16  # Visual Studio 2017 (v141)

      - name: Prepare config.vc
        run: |
          Copy-Item -Path "project\build\config.vc.dist" -Destination "project\build\config.vc"
          $content = Get-Content -Path "project\build\config.vc"
          $content = $content -replace "PYTHON_VER_MAJOR=\d+", "PYTHON_VER_MAJOR=${{ matrix.python.major }}"
          $content = $content -replace "PYTHON_VER_MINOR=\d+", "PYTHON_VER_MINOR=${{ matrix.python.minor }}"
          Set-Content -Path "project\build\config.vc" -Value $content

      - name: Build vendor dependencies
        shell: cmd
        run: |
          cd vendorsrc
          powershell -ExecutionPolicy Bypass -File vendor.ps1
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.architecture }}.bat"
          nmake /f Makefile.vc TARGET_CPU=${{ matrix.architecture }} build-all

      - name: Build libRETS
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.architecture }}.bat"
          nmake /f Makefile.vc TARGET_CPU=${{ matrix.architecture }} all
          nmake /f Makefile.vc TARGET_CPU=${{ matrix.architecture }} swig

      - name: Build Python wheel
        shell: cmd
        run: |
          cd project\swig\python
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars${{ matrix.architecture }}.bat"
          python setup.py bdist_wheel

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: librets-py${{ matrix.python.version }}-${{ matrix.architecture }}-wheel
          path: project\swig\python\dist\*.whl
          retention-days: 7

  release-wheels:
    name: Release wheels to PyPI
    needs: build_wheels
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install twine

      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          pattern: librets-py*-wheel
          path: dist
          merge-multiple: true

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*.whl 